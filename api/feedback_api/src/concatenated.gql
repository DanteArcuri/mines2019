# Base Query
type Query {
  version : String
}

# Base Mutation
type Mutation {
  version : String
}

# Generic status payload for mutators
type StatusPayload {
  success   : Boolean!
}

type StatusIDPayload {
  success   : Boolean!
  id        : String
}

# Generic payload for refetch operations
type RefetchPayload {
  id         : String
  operation  : RefetchOperation
  success    : Boolean!
}

# CRUD refetch operation
enum RefetchOperation {
  INSERT
  READ
  DELETE
  UPDATE
  NONE
}

############################################
# Viewable interface
############################################

interface Viewable {
  view_type             : ViewType!
}

enum ViewType {
  CONTENT
  ASSIGNMENT
  PRACTICE
  CONFERENCE
  STUDENT_ASSIGNMENT
  STUDENT_PRACTICE
  STUDENT_CONFERENCE
}

union AppViewable = APStudentViewable | RTPStudentViewable

type APStudentViewable {
  book_title: String!
  book_characther: String!
}

type RTPStudentViewable {
  title: String!
}

interface StudentViewable {
  view_type: ViewType!
  app_view : AppViewable!
}



############################################
# Favoritable Decorator
############################################

type Favoritable {
  favorite_count             : Int!
  user_favorite                : Boolean!
}

input FavoriteContentInput {
  user_id               : String!
  content_id            : ID!
}

type FavoriteContentPayload {
  is_now_fav  : Boolean
  ae_rids     : [String]
}


############################################
# Mutations
############################################

extend type Mutation
{
  toggle_favorite_content(input: FavoriteContentInput!):FavoriteContentPayload
}

mutation ToggleFavoriteContent($input: FavoriteContentInput!) {
  toggle_favorite_content(input: $input) {
    is_now_fav
    ae_rids
  }
}

############################################
# Searchable Decorator
############################################

type Searchable {
  id                  : ID!
  content_type        : ContentType!
  description         : String
  parent_id           : ID!
  published_by_name   : String!
  tag_list            : [String]!
  owner_id            : String!
  owner_name          : String!
  sharing             : SharingType!
  title               : String
  view_type           : ViewType!
  last_modified       : String!
  question_count      : Int
}

enum SharingType {
  PUBLIC
  PRIVATE
  AWAITING_MODERATION
  DENIED
  SILOED
}

 input RTPSearchableInput {
  question_count        : Int
  sharing               : SharingType
}

scalar SearchQuery

############################################
# Queries and Mutations
############################################

extend type Query
{
  search_content(search_terms: SearchQuery!, teacher_id: String, owner_id: String, limit: Int, offset: Int): PaginatedContent
}

############################################
# Lockable Decorator
############################################

type Lockable {
  state :LockState!
}

enum LockState {
  LOCKED
  UNLOCKED
}

############################################
# Content
############################################

type Content implements Viewable
{
  view_type             : ViewType!            # Viewable
  id                    : ID!
  title                 : String
  last_modified         : String!
  created_on            : String    # Opt: interleaved AP has no created_on
  gallery_image_id      : String!
  tag_list              : [String]!
  owner_id              : String!
  published_by_name     : String!
  description           : String!
  usage_label           : UsageLabel!
  content_type          : ContentType!
  external_content_data : ExternalContentData!
  meta_searchable       : Searchable
  meta_favoritable      : Favoritable
  meta_lockable         : Lockable
  popularity            : Float
  grade_level           : Int
  content_silos          : [ContentSilo]
}


# application specific content type
enum ContentType {
  ADAPTIVE_TUTOR
  REAL_TIME_POLLS
}

type ExternalContentData {
  content_id            : ID!
  owner_id              : ID!
  app_data              : AppContentData!
}

input RefetchExternalContentDataInput {
  content_id   : ID!
  content_type : ContentType!
}

# application specific content data
union AppContentData = RTPContentData | APContentData

type RTPContentData {
  poll_id:    String!
  staff_pick: Boolean
  mdval:      Int
}

# book_name (not id) is in the CMS, so we'll stick with that, e.g. rational_numbers_intro_1, frac_refresh_3
type APContentData {
  # Required to start the app at the right place:
  wma_version                       : String!
  book_name                         : String!
  # Required to display the content
  book_character                    : String!
  book_title                        : String!
  grade_level                       : String!
}

# usage modality
enum UsageLabel {
  WARMUP
  EXIT_TICKET
  CLASS_DISCUSSION
  QUIZ
  HOMEWORK
  LEGACY
  AP_BOOK
}

# Added 5/7/19 - allows for segregation of content between apps - null imples WOOTMATH
enum ContentSilo {
  WOOTMATH
  SAGA
  BVSD
}

input CreateContentFromAPInput {
  wma_version           : String!
  book_name             : String!
  book_character        : String!
  book_title            : String!
  grade_level           : String!
}

type CreateContentPayload {
  id            : ID
  title         : String
}

input UpdateContentPopularityInput {
  content_data          : [ContentPopularityData]!
}

input ContentPopularityData {
  content_id            : ID!
  external_content_id   : String!
}

type UpdateContentPopularityPayload {
  success           : Boolean!
}

type PaginatedContent {
  has_next          : Boolean!
  content           : [Content]!
}

input RTPExternalContentDataInput {
  content_id                : ID!
  owner_id                  : ID!
  app_data                  : RTPAppContentDataInput
}

input RTPAppContentDataInput {
  poll_id                   : String!
}

############################################
# Content Instance Data
############################################

type ContentInstance implements Viewable
{
  id                      : ID!
  usage_label             : UsageLabel!
  gallery_image_id        : String!
  tag_list                : [String]!
  title                   : String
  view_type               : ViewType!
  content_type            : ContentType!
  published_by_name       : String!
  teacher_id              : String!
  course_provider         : CourseProvider!
  section_id              : String!
  external_instance_data  : ExternalInstanceData!
  content_silos            : [ContentSilo]
}

type RTPInstanceData {
  instance_id     : String!
}

type APInstanceData {
  wma_version     : String!
  book_name       : String!
  book_character  : String!
  book_title      : String!
  grade_level     : String!
}

union ExternalInstanceData = RTPInstanceData | APInstanceData

input RefetchContentInstanceInput {
  teacher_id            : String!
  course_provider       : CourseProvider!
  section_id            : String!
  content_id            : ID!
  content_type          : ContentType!
  instance_id           : ID
  external_instance_id  : ID
}

############################################
# Queries
############################################

extend type Query
{
  # content
  all_content(with_details:Boolean, limit: Int, offset: Int): PaginatedContent
  content_by_content_silo(content_silos:[ContentSilo]!,with_details:Boolean, limit: Int, offset: Int): PaginatedContent
  my_content(user_id: ID!, with_details:Boolean, limit: Int, offset: Int): PaginatedContent
  my_favorite_content(user_id: ID!, with_details:Boolean, limit: Int, offset: Int): PaginatedContent
  # "Decorated" means favs / unlockable state populated per user_id, but it's not required
  decorated_public_content(user_id: ID, limit: Int, offset: Int): PaginatedContent
  my_premium_content(user_id: ID!, with_details:Boolean, limit: Int, offset: Int, sort_by_lock_state: Boolean, active_content_only: Boolean): PaginatedContent

  get_external_content_ids_by_content_type(content_types:[ContentType]!): [Content]
  get_content_by_external_content_id(content_type:ContentType, external_content_id:ID): Content
}


fragment CommonAPContentData on APContentData {
  wma_version
  book_name
  book_character
  book_title
  grade_level
}

fragment CommonAPInstanceData on APInstanceData {
  wma_version
  book_name
  book_character
  book_title
}


##################################
## Fragments on content queries
##################################

fragment CommonContentExtData on Content {
  external_content_data {
    content_id
    owner_id
    app_data {
      ...on RTPContentData {
        poll_id
        staff_pick
        mdval
      }
      ...on APContentData { ...CommonAPContentData }
    }
  }
}

# This one is used by the Riot content views as their opts type
fragment CommonContentFields on Content {
  # Basic fields
  id
  title
  last_modified
  usage_label
  gallery_image_id
  published_by_name
  content_type
  content_silos
  created_on

  # Include common ExtData
  ...CommonContentExtData

  # Where should we put these?
  meta_lockable {
    state
  }

  meta_favoritable {
    favorite_count
    user_favorite
  }

  meta_searchable { # Displayed by the slug view...
    tag_list
  }
}

query AllContent($limit: Int, $offset: Int) {
  all_content(limit: $limit, offset: $offset) {
    has_next
    content {
      ...CommonContentFields
    }
  }
}

query ContentByContentSilo($content_silos: [ContentSilo]!, $limit: Int, $offset: Int) {
  content_by_content_silo(content_silos: $content_silos, limit: $limit, offset: $offset) {
    has_next
    content {
      ...CommonContentFields
    }
  }
}

query MyContent($user_id: ID!, $limit: Int, $offset: Int) {
  my_content(user_id: $user_id, limit: $limit, offset: $offset) {
    has_next
    content {
      ...CommonContentFields
    }
  }
}

query MyFavoriteContent($user_id: ID!, $limit: Int, $offset: Int) {
  my_favorite_content(user_id: $user_id, limit: $limit, offset: $offset) {
    has_next
    content {
      ...CommonContentFields
    }
  }
}

query DecoratedPublicContent($user_id: ID, $limit: Int, $offset: Int) {
  decorated_public_content(user_id: $user_id, limit: $limit, offset: $offset) {
    has_next
    content {
      ...CommonContentFields
    }
  }
}

query MyPremiumContent($user_id: ID!, $limit: Int, $offset: Int, $sort_by_lock_state: Boolean, $active_content_only: Boolean) {
  my_premium_content(user_id: $user_id, limit: $limit, offset: $offset, sort_by_lock_state: $sort_by_lock_state, active_content_only: $active_content_only) {
    has_next
    content {
      ...CommonContentFields
    }
  }
}

query GetExternalContentIDsByContentType($content_types: [ContentType]!) {
  get_external_content_ids_by_content_type(content_types: $content_types) {
    id
    external_content_data {
      content_id
    }
  }
}

query GetContentByExternalContentID($content_type:ContentType, $external_content_id:ID) {
  get_content_by_external_content_id(content_type:$content_type, external_content_id:$external_content_id) {
    ...CommonContentFields
  }
}

# TODO: Adam, you might need a different fragment setup for search. Let's talk...
query SearchContent($search_terms: SearchQuery!, $teacher_id: String, $owner_id: String, $limit: Int, $offset: Int) {
  search_content(search_terms: $search_terms, teacher_id: $teacher_id, owner_id: $owner_id, limit: $limit, offset: $offset) {
    has_next
    content {
      ...CommonContentFields
    }
  }
}

############################################
# Mutations
############################################

extend type Mutation {
  # single typed input and typed payload,
  # see https://dev-blog.apollodata.com/designing-graphql-mutations-e09de826ed97
  create_content_from_ap(input: CreateContentFromAPInput!):CreateContentPayload
  # delete_content(input: DeleteContentInput!):DeleteContentPayload
  refetch_external_content_data(input: RefetchExternalContentDataInput!):RefetchPayload
  update_content_popularity(input: UpdateContentPopularityInput!):UpdateContentPopularityPayload
  # Bug Scrub 9/21
  add_active_premium_content(input: AddActivePremiumContentInput!):AddActivePremiumContentPayload
  # content instance (instance data)
  refetch_content_instance(input: RefetchContentInstanceInput!):RefetchPayload
}


mutation RefetchExternalContentData($input: RefetchExternalContentDataInput!) {
  refetch_external_content_data(input: $input) {
    success
    id
    operation
  }
}

mutation RefetchContentInstance($input: RefetchContentInstanceInput!) {
  refetch_content_instance(input: $input) {
    success
    id
    operation
  }
}

mutation UpdateContentPopularity($input: UpdateContentPopularityInput!) {
  update_content_popularity(input: $input) {
    success
  }
}

mutation CreateContentFromAP($input: CreateContentFromAPInput!) {
  create_content_from_ap(input: $input) {
    id
    title
  }
}

# Bug Scrub 9/21
mutation AddActivePremiumContent($input: AddActivePremiumContentInput!) {
  add_active_premium_content(input: $input) {
    success
  }
}

# Bug Scrub 9/21
input AddActivePremiumContentInput {
  teacher_id        : String!
  content_id        : ID!
}

# Bug Scrub 9/21
type AddActivePremiumContentPayload {
  success           : Boolean!
}

# <link rel="../wmlms.css" type="text/css">
# <div class="wmlms-comment">
#   <div><span>Summary:</span> <span class="wmlms-text"> Teacher Assignment Data </span></div>
#   <div>
#     <span> Description:</span> <span class="wmlms-text">This object represents
#     the LMS data associated with an assignment made by a teacher. These
#     objects correspond with a teacher_id and a course_provider,
#     section_id pair. They are in 1-1 correspondance with a ContentInstance
#     object (by reference ID) </span>
#   </div>
# </div>
#
type Assignment implements Viewable {
  # Enumerate type of view for gallery types specific behavior
  view_type                 : ViewType!
  # GUID
  id                        : ID!
  # Displayed title
  title                     : String
  # timestamp (ms)
  last_modified             : String!
  # Woot Math teacher_id
  teacher_id                : String!
  # Course provider
  course_provider           : CourseProvider!
  # Section id (ToDo: CourseProvider)
  section_id                : String!
  # ToDo: Depreciated
  course_id                 : String!
  # Enumerates the Activity (App)
  activity_type             : ActivityType!
  # Student activity URLS
  student_activity          : StudentActivity!
  # Teacher activity URLS (optional)
  teacher_activity          : TeacherActivity
  # Shorthand for Student Activity (optional e.g. poll_code)
  activity_code             : String
  # Assignment lifecycle (timestamp ms)
  unlock_at                 : String
  # Assignment lifecycle (timestamp ms)
  due_at                    : String
  # Enumerates assignment state
  state                     : AssignmentState
  # ToDo: Move to ContentInstance
  submissions               : [Submission]
  # ToDo: revisit
  report                    : TeacherAssignmentReport
  # Associated ContentInstance (by reference)
  content_instance          : ContentInstance
  # Associated ContentInstance (by reference)
  content_instance2         : ContentInstance
}

# Bug Scrub 9/21 - #4419
enum AssignmentState {
  # Not yet started
  PENDING
  # In progress
  ACTIVE
  # Ended but not Archived
  ENDED
  # Archived
  ARCHIVED
  # Deleted
  DELETED
}

enum ActivityType {
  # Teacher Led Poll
  REAL_TIME_POLL_TEACHER_LED
  # Student Led Poll
  REAL_TIME_POLL_STUDENT_LED
  # Adaptive Tutor Book
  ADAPTIVE_TUTOR_BOOK
}

type StudentActivity {
  # Student activity open URL
  open_url                 : String!                             # required
  # Student activity end URL (optional)
  end_url                  : String                              # optional
}

type TeacherActivity {
  # Report URL
  report_url: String!
  # Teacher activity open URL (optional)
  open_url: String
  # Teacher activity end URL (optional)
  end_url: String
}

# <div class="wmlms-comment">
#   <div><span>Summary:</span> <span class="wmlms-text"> Student Assignment Data </span></div>
#   <div>
#     <span> Description:</span> <span class="wmlms-text">This object represents
#       the LMS data associated with an students view of an assignment. These
#       objects correspond with a student_id. The object references ContentInstance and
#       parent Assignment objects.
#     </span>
#   </div>
# </div>
type StudentAssignment implements Viewable {
  # GUID
  id                        : ID!
  # Viewable - Enumerate type of view for gallery types specific behavior
  view_type                 : ViewType!
  # Woot Math student id
  student_id                : String!
  # Parent Assignment (by reference)
  assignment                : Assignment!
  # Content Instance (by reference)
  content_instance          : ContentInstance!
  # Assignment State
  state                     : AssignmentState!
  # % Complete
  progress                  : Float!
  # Pristine
  is_new                    : Boolean!
  # Student Activity URLs
  student_activity          : StudentActivity!
}

input TeacherActivityInput {
  report_url                : String!
  open_url                  : String
  end_url                   : String
}

input StudentActivityInput {
  open_url                  : String!
  end_url                   : String
  code                      : String
}

# Bug Scrub 9/21
input UpdateAssignmentInput {
  teacher_id               : String!
  assignment_id            : ID!
  state                    : AssignmentState!
  teacher_activity         : TeacherActivityInput    # (optional) pass up the end_url
}

input CreateAssignmentInput {
  teacher_id                : String!                                         # Woot Math teacher_id
  content_id                : ID!                                             # Content
  external_instance_id      : ID                                              # ContentInstance.external_instance_data.instance_id (optional)
  activity_type             : ActivityType!
  student_activity          : StudentActivityInput!
  teacher_activity          : TeacherActivityInput!
  activity_code             : String                                          # (optional)
  title                     : String                                          # (optional) defaults to Content title
  unlock_at                 : String                                          # (optional) unlock date (String timestamp)
  due_at                    : String                                          # (optional) due data (String timestamp)
  course_provider           : CourseProvider!
  course_id                 : String!                                         # course_id (1:1 with assignments)
  section_id                : String!                                         # section_id (1:1 with assignments)
  student_ids               : [String]!                                       # students to create StudentAssignment for - all in section if empty
}

type CreateAssignmentPayload {
  id                       : ID!
  section_id               : String
  course_provider          : CourseProvider
  teacher_activity         : TeacherActivity
  student_activity         : StudentActivity
}

input EndAssignmentInput {
  teacher_id               : String!
  assignment_id            : ID!
  teacher_activity         : TeacherActivityInput
}

type EndAssignmentPayload {
  status                    : Boolean
}

input UpdateStudentAssignmentInput {
  student_id                : ID!                                             # Woot Math student_id
  assignment_id             : ID!                                             # Associated assignment ID
  progress                  : Float!
  is_new                    : Boolean!
}

input CreateStudentAssignmentInput {
  id                        : ID!                                             # guid
  student_id                : String!                                         # Woot Math student_id
  assignment_id             : ID!                                             # Associated assignment ID
  content_instance_id       : ID!
  state                     : AssignmentState                                 # Assignment State
  progress                  : Float!                                          # Progress through assignment [0 - 1]
  is_new                    : Boolean!                                        # Assignment is new for student - likely needs to be calculated at instantiation
  student_activity          : StudentActivityInput!
}

input AddStudentsToAssignmentInput {
  teacher_id: String!
  assignment_id: ID!
  students: [String]!
}

type AddStudentsToAssignmentPayload {
  status: Boolean!
}

type CreateStudentAssignmentPayload {
  student_assignment        : StudentAssignment
}

type UpdateStudentAssignmentPayload {
  status: Boolean!
}


extend type Query
{
  # assignment
  assignment(id: ID!): Assignment
  assignments(course_id: ID!): [Assignment]
  assignments_by_teacher_id(teacher_id: ID!, states: [AssignmentState]!, section_ids:[String]!, labels:[UsageLabel]!, limit: Int, offset: Int): [Assignment]
  assignment_by_activity_code(activity_code:String!): Assignment

  # student assignment
  student_assignment(id: ID!): StudentAssignment
  student_assignments_by_student_id(student_id: ID!, limit: Int, offset: Int, states:[AssignmentState]): [StudentAssignment]
  student_assignments_by_assignment_id(assignment_id: ID!, limit: Int, offset: Int): [StudentAssignment]
  all_assignments(teacher_id: ID, limit: Int, offset: Int, states:[AssignmentState]): [Assignment]
}

# This query currently returns a minimal amount of data to support repairing data after schema changes
# It can be augmented with additional fields as needed
query GetAssignments( $teacher_id: ID, $limit: Int, $offset: Int, $states:[AssignmentState] ) {
  all_assignments(teacher_id: $teacher_id, limit: $limit, offset: $offset, states: $states) {
    id
    content_instance {
      title
    }
  }
}

query GetAssignmentsByTeacherId( $teacher_id: ID!, $states:[AssignmentState]!, $section_ids:[String]!, $labels:[UsageLabel]!, $limit: Int, $offset: Int) {
  assignments_by_teacher_id(teacher_id: $teacher_id, states: $states, section_ids: $section_ids, labels: $labels, limit: $limit, offset: $offset) {
    id
    title
    teacher_id
    section_id
    course_provider
    course_id
    unlock_at
    due_at
    last_modified
    state
    view_type
    activity_type
    teacher_activity {
      report_url
      open_url
      end_url
    }
    student_activity {
      open_url
      end_url
    }
    submissions {
      student_id
      created_at
      task_data {
        per_correct
        completed
      }
    }
    #...CommonContentFields # ToDo - why didn't this work?
    content_instance {
      usage_label
      gallery_image_id
      title
      view_type
      content_type
      published_by_name
      tag_list
      external_instance_data {
        ...on RTPInstanceData { instance_id }
        ...on APInstanceData { ...CommonAPInstanceData }
      }
    }
  }
}

query GetAssignmentIDByActivityCode($activity_code:String! ) {
  assignment_by_activity_code(activity_code: $activity_code) {
    id
  }
}
query GetStudentActivityOpenURLByAssignmentID( $aid:ID!) {
  assignment(id: $aid) {
    student_activity {
      open_url
    }
  }
}

query GetAssignmentStudentAuthInfo( $aid:ID! ) {
  assignment(id: $aid) {
    id
    teacher_id
    course_id
    section_id
    course_provider
    activity_code
  }
}
query GetStudentAssignmentsByAssignmentId( $assignment_id: ID!, $limit: Int, $offset: Int) {
  student_assignments_by_assignment_id(assignment_id: $assignment_id, limit: $limit, offset: $offset) {
    id
    student_id
    state
    progress
    is_new
  }
}

query GetStudentAssignmentsByStudentId( $student_id: ID!, $limit: Int, $offset: Int, $states:[AssignmentState]) {
  student_assignments_by_student_id(student_id: $student_id, limit: $limit, offset: $offset, states: $states) {
    student_id
    state
    progress
    is_new
    student_activity {
      open_url
      end_url
    }
    assignment {
      id
      title
      last_modified
      view_type
      teacher_id
      activity_type
      section_id
      course_id
      unlock_at
      due_at
      state
      content_instance {
        usage_label
        content_type
        gallery_image_id
        tag_list
        external_instance_data {
          ...on APInstanceData {
            book_name
            book_character
            book_title
          }
        }
      }
    }
  }
}

extend type Mutation
{
  create_assignment(input: CreateAssignmentInput!):[CreateAssignmentPayload]
  end_assignment(input: EndAssignmentInput!):EndAssignmentPayload
  create_student_assignment(input: CreateStudentAssignmentInput!):CreateStudentAssignmentPayload
  add_students_to_assignment(input: AddStudentsToAssignmentInput!):AddStudentsToAssignmentPayload
  update_student_assignment(input: UpdateStudentAssignmentInput!):UpdateStudentAssignmentPayload
  update_assignment(input: UpdateAssignmentInput!):StatusPayload
}

mutation UpdateAssignment($input: UpdateAssignmentInput!) {
  update_assignment(input: $input) {
    success
  }
}

mutation CreateAssignment($input: CreateAssignmentInput!) {
  create_assignment(input: $input) {
    id
    section_id
    course_provider
    teacher_activity {
      open_url
    }
    student_activity {
      open_url
    }
  }
}

mutation EndAssignment($input: EndAssignmentInput!) {
  end_assignment(input: $input) {
    status
  }
}

mutation CreateStudentAssignment($input: CreateStudentAssignmentInput!) {
  create_student_assignment(input: $input) {
    student_assignment {
      id
    }
  }
}

mutation AddStudentsToAssignment($input: AddStudentsToAssignmentInput!) {
 add_students_to_assignment(input: $input) {
   status
 }
}

mutation UpdateStudentAssignment($input: UpdateStudentAssignmentInput!) {
  update_student_assignment(input: $input) { status }
}


############################################
# Conference
############################################

type Conference implements Viewable {
  view_type        : ViewType!
  id               : ID!
  teacher_id       : String!
  title            : String!
  created_at       : String!
  last_modified    : String!
  start_at         : String!
  end_at           : String!
  activity_url     : String!
  state            : ConferenceState!
  content_instance : ContentInstance
  scholars         : [Scholar]!
}

enum ConferenceState {
  NOT_STARTED
  IN_PROGRESS
  ENDED
  DELETED
}

type StudentConference implements Viewable {
  view_type        : ViewType!
  id               : ID!
  scholar          : Scholar! # Stored as student_id
  conference       : Conference!
  activity_url     : String!
}

type Tutor {
  teacher_id       : String!
  tutor_id         : String!
  email            : String!
  name_first       : String!
  name_last        : String!
  phone            : String
}

type Scholar {
  student_id       : String!
  scholar_id       : String!
  email            : String!
  name_first       : String!
  name_last        : String!
  phone            : String!
}

############################################
# Inputs and Payloads
############################################

input CreateTutorInput {
  # Either teacher_id or email are required - if both are supplied, teacher_id will take presedence
  teacher_id       : String
  email            : String
  name_first       : String
  name_last        : String
  phone            : String
  password         : String
}

type CreateTutorPayload {
  success          : Boolean!
  tutor_id         : String
  teacher_id       : String
  error_code       : String
  message          : String
}

input RemoveTutorInput {
  teacher_id       : String
  email            : String
}

type RemoveTutorPayload {
  success          : Boolean!
}

input CreateScholarInput {
  email            : String!
  name_first       : String!
  name_last        : String!
  phone            : String!
  password         : String!
}

type CreateScholarPayload {
  success          : Boolean!
  scholar_id       : String
  student_id       : String
  error_code       : String
  message          : String
}

input RemoveScholarInput {
  student_id       : String
  email            : String
}

type RemoveScholarPayload {
  success          : Boolean!
}

input UpdateScholarInput {
  student_id       : String!
  email            : String
  name_first       : String
  name_last        : String
  phone            : String
}

type UpdateScholarPayload {
  success          : Boolean!
  scholar_id       : String
  email            : String
  name_first       : String
  name_last        : String
  phone            : String
}


input CreateConferenceInput {
  teacher_id          : String!
  title               : String!
  start_at            : String!
  end_at              : String!
  activity_url        : String!
  student_ids         : [String]!
  content_id          : ID
  external_content_id : ID
}

input UpdateConferenceInput {
  id               : ID!
  title            : String
  start_at         : String
  end_at           : String
  activity_url     : String
  state            : ConferenceState
  student_ids      : [String]
}

input DeleteConferenceInput {
  id               : ID!
}

input CreateStudentConferenceInput {
  conference_id    : ID!
  student_id       : String!
  activity_url     : String!
}

type CreateStudentConferencePayload {
  success          : Boolean!
  id               : ID
}

input StartConferenceInput {
  id               : ID!
}

type StartConferencePayload {
  success          : Boolean!
}

input EndConferenceInput {
  id               : ID!
}

type EndConferencePayload {
  success          : Boolean!
}

input AssociateTutorScholarInput {
  teacher_id       : String!
  student_email    : String!
}

type AssociateTutorScholarPayload {
  success          : Boolean!
}

############################################
# Query and Mutation
############################################

extend type Query
{
  conference(id: ID!): Conference!
  conferences_by_teacher_id(teacher_id: String!, states: [ConferenceState], limit: Int, offset: Int): [Conference]!
  conferences_by_admin_id(admin_teacher_id: String!, states: [ConferenceState], limit: Int, offset: Int): [Conference]!
  student_conference(id: ID!): StudentConference!
  student_conferences_by_student_id(student_id: String!): [StudentConference]!
  student_conferences_by_conference_id(conference_id: String!): [StudentConference]!
  tutor_by_teacher_id(teacher_id: String!): Tutor!
  tutors_by_admin_id(admin_teacher_id: String!): [Tutor]!
  scholar_by_student_id(student_id: String!): Scholar!
  scholars_by_teacher_id(teacher_id: String!): [Scholar]!
  tutors_by_student_id(student_id: String!): [Tutor]!
}

fragment CommonTutorFields on Tutor {
  teacher_id
  tutor_id
  email
  name_first
  name_last
  phone
}

fragment CommonScholarFields on Scholar {
  student_id
  scholar_id
  email
  name_first
  name_last
  phone
}

fragment CommonConferenceFields on Conference {
  id
  view_type
  created_at
  last_modified
  teacher_id
  title
  start_at
  end_at
  activity_url
  content_instance {
    id
    usage_label
    gallery_image_id
    tag_list
    title
    view_type
    content_type
    published_by_name
    teacher_id
    course_provider
    section_id
    external_instance_data {
      ...on RTPInstanceData { instance_id }
      ...on APInstanceData { ...CommonAPInstanceData }
    }
  }
  state
  scholars {
    ...CommonScholarFields
  }
}

fragment CommonStudentConferenceFields on StudentConference {
  id
  view_type
  conference {
    ...CommonConferenceFields
  }
  scholar {
    ...CommonScholarFields
  }
  activity_url
}

query GetConference($id: ID!) {
  conference(id: $id) {
    ...CommonConferenceFields
  }
}

query GetConferencesByAdminID($admin_teacher_id: String!, $states: [ConferenceState], $limit: Int, $offset: Int) {
  conferences_by_admin_id(admin_teacher_id: $admin_teacher_id, states: $states, limit: $limit, offset: $offset) {
    ...CommonConferenceFields
  }
}

query GetConferencesByTeacherID($teacher_id: String!, $states: [ConferenceState], $limit: Int, $offset: Int) {
  conferences_by_teacher_id(teacher_id: $teacher_id, states: $states, limit: $limit, offset: $offset) {
    ...CommonConferenceFields
  }
}

query GetStudentConference($id: ID!) {
  student_conference(id: $id) {
    ...CommonStudentConferenceFields
  }
}

query GetStudentConferencesByStudentID($student_id: String!) {
  student_conferences_by_student_id(student_id: $student_id) {
    ...CommonStudentConferenceFields
  }
}

query GetStudentConferencesByConferenceID($conference_id: String!) {
  student_conferences_by_conference_id(conference_id: $conference_id) {
    ...CommonStudentConferenceFields
  }
}

query GetTutorByTeacherID($teacher_id: String!) {
  tutor_by_teacher_id(teacher_id: $teacher_id) {
    ...CommonTutorFields
  }
}

query GetTutorsByAdminID($admin_teacher_id: String!) {
  tutors_by_admin_id(admin_teacher_id: $admin_teacher_id) {
    ...CommonTutorFields
  }
}

query GetScholarByStudentID($student_id: String!) {
  scholar_by_student_id(student_id: $student_id) {
    ...CommonScholarFields
  }
}

query GetScholarsByTeacherID($teacher_id: String!) {
  scholars_by_teacher_id(teacher_id: $teacher_id) {
    ...CommonScholarFields
  }
}

query GetTutorsByStudentID($student_id: String!) {
  tutors_by_student_id(student_id: $student_id) {
    ...CommonTutorFields
  }
}

extend type Mutation {
  create_tutor(input: CreateTutorInput!): CreateTutorPayload!
  remove_tutor(input: RemoveTutorInput!): RemoveTutorPayload!
  create_scholar(input: CreateScholarInput!): CreateScholarPayload!
  remove_scholar(input: RemoveScholarInput!): RemoveScholarPayload!
  update_scholar(input: UpdateScholarInput!): UpdateScholarPayload!
  create_conference(input: CreateConferenceInput!): StatusIDPayload!
  update_conference(input: UpdateConferenceInput!): StatusIDPayload!
  delete_conference(input: DeleteConferenceInput!): StatusPayload!
  create_student_conference(input: CreateStudentConferenceInput!): CreateStudentConferencePayload!
  start_conference(input: StartConferenceInput!): StartConferencePayload!
  end_conference(input: EndConferenceInput!): EndConferencePayload!
  associate_tutor_scholar(input: AssociateTutorScholarInput!): AssociateTutorScholarPayload!
  disassociate_tutor_scholar(input: AssociateTutorScholarInput!): AssociateTutorScholarPayload!
}

mutation CreateTutor($input: CreateTutorInput!) {
  create_tutor(input: $input) {
    success
    tutor_id
  }
}

mutation RemoveTutor($input: RemoveTutorInput!) {
  remove_tutor(input: $input) {
    success
  }
}

mutation CreateScholar($input: CreateScholarInput!) {
  create_scholar(input: $input) {
    success
    scholar_id
  }
}

mutation RemoveScholar($input: RemoveScholarInput!) {
  remove_scholar(input: $input) {
    success
  }
}

mutation UpdateScholar($input: UpdateScholarInput!) {
  update_scholar(input: $input) {
    success
    scholar_id
    email
    name_first
    name_last
    phone
  }
}

mutation CreateConference($input: CreateConferenceInput!) {
  create_conference(input: $input) {
    success
    id
  }
}

mutation UpdateConference($input: UpdateConferenceInput!) {
  update_conference(input : $input) {
    success
    id
  }
}

mutation DeleteConference($input: DeleteConferenceInput!) {
  delete_conference(input : $input) {
    success
  }
}

mutation StartConference($input: StartConferenceInput!) {
  start_conference(input: $input) {
    success
  }
}

mutation EndConference($input: EndConferenceInput!) {
  end_conference(input: $input) {
    success
  }
}

mutation CrateStudentConference($input: CreateStudentConferenceInput!) {
  create_student_conference(input: $input) {
    success
    id
  }
}

mutation AssociateTutorScholar($input: AssociateTutorScholarInput!) {
  associate_tutor_scholar(input: $input) {
    success
  }
}

mutation DisassociateTutorScholar($input: AssociateTutorScholarInput!) {
  disassociate_tutor_scholar(input: $input) {
    success
  }
}

############################################
# Submission Schema
############################################

enum SubmissionTargetType {
  ASSIGNMENT
  PRACTICE
}

interface SubmissionTarget {
  target_type       : SubmissionTargetType
  teacher_id        : ID!
  course_provider   : CourseProvider!
  section_id        : ID!
  content_instance  : ContentInstance!
}

type Submission {
  id: ID!
  created_at: String!
  student_id: String!
  assignment_id: ID!
  task_data: [SubmissionTaskData]!
}

type SubmissionTaskData {
  completed: Boolean!
  graded: Boolean!
  per_correct: Int
}

input SubmissionTaskDataInput {
  completed: Boolean!
  graded: Boolean!
  per_correct: Int
}

input UpdateSubmissionInput {
  student_id            : String!                      # WM Student ID
  assignment_id         : ID!
  task_data             : [SubmissionTaskDataInput!]
}

type UpdateSubmissionPayload {
  status: Boolean!
}

############################################
# Queries and Mutations
############################################

# extend type Query
# {

# }

extend type Mutation
{
  # single typed input and typed payload (see above blog)
  update_submission(input: UpdateSubmissionInput!):UpdateSubmissionPayload
}

mutation UpdateSubmission($input: UpdateSubmissionInput!) {
  update_submission(input: $input) { status }
}

##############################################
# Teacher AP Subscription Schema
##############################################

type TeacherSubscriptionData {
  # id                      : ID!                        # GUID
  has_premium_content     : Boolean!
  teacher_id              : String!
  subscription_type       : SubscriptionType!          # NONE indicates that the previous subscription has expired
  total_licenses          : Int
  total_free_books        : Int                        # Available books in free_tier
  free_tier_books         : [String]                   # Array of book names already selected
  # start_date              : String                     # Same as most recent PurchasedLicense if any
  # end_date                : String                     # Same as most recent PurchasedLicense if any
  # Remaining fields should be resolved in the future
  # used_licenses           : Int                        # Number of licenses in use
  # available_licenses      : Int                        # Number of licenses not in use
  # school_year             : String!                    # XX-YY - same as most recent PurchasedLicense if any
  # subscription_history    : [TeacherSubscriptionData]! # Array of IDs of previous TeacherSubscriptionData
  # last_modified           : String!
  # purchased_licenses      : [PurchasedLicense]         # I'm not sure if this makes more sense as an array or not
  # licensed_sections       : [Section]                  # Array of sections licensed for this teacher
}

type PurchasedLicense {
  license_code            : String! # From the Google doc
  license_type            : LicenseType!
  quantity                : Int!
  school_year             : String!
  purchase_date           : String!
  start_date              : String!
  end_date                : String!
}

type Section {
  section_id              : String!
  student_count           : Int!
  licenses_used           : Int!
}

enum SubscriptionType {
  PREMIUM # or PAID
  PILOT
  FREE_TIER
  TIME  # May not be needed
  NONE
}

enum LicenseType {
  INDIVIDUAL
  SCHOOL
  DISTRICT
  OTHER
}

type UpdateTeacherSubscriptionDataPayload {
  total_free_books  : Int
  free_tier_books   : [String]
}

input TeacherSubscriptionDataInput {
  teacher_id            : String!
  total_free_books      : Int
  books_to_add          : [String]
  books_to_remove       : [String]
}

############################################
# Queries
############################################

extend type Query
{
  teacher_subscription_data(teacher_id: String!): TeacherSubscriptionData
}

query GetTeacherSubscriptionData($teacher_id: String!) {
  teacher_subscription_data(teacher_id: $teacher_id) {
    has_premium_content
    teacher_id
    subscription_type
    total_licenses
    total_free_books
    free_tier_books
  }
}

############################################
# Mutations
############################################

extend type Mutation
{
  update_teacher_subscription_data(input: TeacherSubscriptionDataInput!):UpdateTeacherSubscriptionDataPayload
}

mutation UpdateTeacherSubscriptionData($input: TeacherSubscriptionDataInput!) {
  update_teacher_subscription_data(input: $input) {
    total_free_books
    free_tier_books
  }
}

############################################
# Reports Schema
############################################

# Report created after a StudentAssignment is submitted
type StudentReport {
  id                    : ID!                                   # guid
  student_id            : String!                               # Woot Math student ID
  student_assignment    : StudentAssignment!                    # Associated StudentAssignment ID
  submitted_at          : String!                               # Timestamp of assignment submission
  usage_label           : String!                               # Usage label - Exit Ticket, Warm UP, etc..
  assignment_title      : String                                # displayable title of associated Assignment
  details               : StudentReportDetails!                 # Report details to be displayed on expanding report
  assignment_content    : [Content]!                            # Array of content belonging to associated Assignment
  flag                  : StudentReportFlag                     # Additional flag to display - NEW, HAS_FEEDBACK, IS_GRADED
}

type StudentReportDetails {                                     # Specific details of a Student Report - will vary depnding on type of content
  detailed_report_url: String                                   # URL for detailed report
  teacher_comment    : String                                   # Comments for the teacher if any
  score              : Score                                    # Score data for the submission
  stars              : Score
  mastery            : Mastery                                  # Level of master - MASTERY, PARTIAL_MASTERY, STRUGGLING, or NO_DATA
  active_time_seconds: Int                                      # Total time in seconds spent on the content
  chart              : StudentChartData                         # Data for the chart - varies depdning on content
}

type StudentChartData {
  data: [StudentChartTuple]
}

type StudentChartTuple {
  label: String
  value: Float
  color: ChartColor
}

type TeacherChartData {
  data: [TeacherChartTuple]
}

type TeacherChartTuple {
  label: String
  total_answers: Int
  correct_answers: Int
  incorrect_answers: Int
}

type Score {
  raw: String
  type: ScoreType
}

type TeacherAssignmentReport {
  id: ID!
  students: [StudentMasteryPair]
  chart: TeacherChartData
  detailed_report_url: String
}

type StudentMasteryPair {
  username: String!
  mastery: Mastery
}

input CreateTeacherAssignmentReportInput {
  # students: [StudentMasteryPair]
  # chart: TeacherChartData
  detailed_report_url: String
}

input RefetchTeacherAssignmentReportInput {
  assignment_id   : ID!
}

type RefetchTeacherAssignmentReportPayload {
  id        : String!
  operation : RefetchOperation!
  success   : Boolean!
}

type CreateTeacherAssignmentReportPayload {
  teacher_assignment_report: TeacherAssignmentReport
}

enum StudentReportFlag {
  IS_NEW
  HAS_FEEDBACK
  IS_GRADED
}

enum Mastery {
  MASTERY
  PARTIAL_MASTERY
  STRUGGLING
  NO_DATA
}

enum ScoreType {
  PERCENT
  LETTER_GRADE
  POINTS
  STARS
}

# where to plug this in
enum GradingType {
  PASS_FAIL
  PERCENT
}

enum ChartColor {
  RED
  YELLOW
  GREEN
}

############################################
# Queries
############################################

extend type Query
{
  # student reports
  student_report(id: ID!): StudentReport
  student_reports_by_student_id(student_id: ID!, limit: Int, offset: Int): [StudentReport]
  # teacher reports
  teacher_assignment_report_by_assignment_id(assignment_id: ID!): TeacherAssignmentReport
}


query GetTeacherAssignmentReportByAssignmentId( $assignment_id : ID!) {
  teacher_assignment_report_by_assignment_id(assignment_id: $assignment_id) {
    detailed_report_url
    chart {
      data {
        label
        total_answers
        correct_answers
        incorrect_answers
      }
    }
    students {
      username
      mastery
    }
  }
}

query GetStudentReportsByStudentId( $student_id: ID!, $limit: Int, $offset: Int) {
  student_reports_by_student_id(student_id: $student_id, limit: $limit, offset: $offset) {
    submitted_at
    assignment_title
    usage_label
    flag
    assignment_content {
      content_type
    }
    details {
      detailed_report_url
      teacher_comment
      mastery
      active_time_seconds
      chart {
        data {
          label
          value
          color
        }
      }
      score {
        raw
        type
      }
      stars {
        raw
        type
      }
    }
  }
}

############################################
# Mutations
############################################

extend type Mutation
{
  # old skool
  create_teacher_assignment_report(input: CreateTeacherAssignmentReportInput!):CreateTeacherAssignmentReportPayload
  # new skool
  refetch_teacher_assignment_report(input: RefetchTeacherAssignmentReportInput!):RefetchTeacherAssignmentReportPayload
}

mutation CreateTeacherAssignmentReport($input: CreateTeacherAssignmentReportInput) {
  create_teacher_assignment_report(input: $input) {
    teacher_assignment_report {
      id
    }
  }
}

mutation RefetchTeacherAssignmentReport($input: RefetchTeacherAssignmentReportInput!) {
  refetch_teacher_assignment_report(input: $input) {
    id
    operation
    success
  }
}

############################################
# Practice Schema
############################################

type Practice implements Viewable
{
  id                        : ID!
  view_type                 : ViewType!                          # Viewable
  title                     : String
  last_modified             : String!
  teacher_id                : String!                            # teacher associated with Assignment
  section_id                : String!                            # associated section_id (1:1 with Assignments)
  course_id                 : String!                            # associated course_id (N:1 with Section)
  course_provider           : CourseProvider!
  activity_type             : ActivityType!
  student_activity          : StudentActivity!                   # student activity (required)
  content_instance          : ContentInstance!
  state                     : PracticeState!
  teacher_activity          : TeacherActivity                    # teacher activity (optional)
}

enum PracticeState {
  ACTIVE
  ENDED
  ARCHIVED
  DELETED
}

type StudentPractice implements Viewable
{
  # GUID
  id                        : ID!
  # Enumerate type of view for gallery types specific behavior
  view_type                 : ViewType!
  # Woot Math student id
  student_id                : String!
  # Parent Practice (by reference)
  practice                  : Practice!
  # Content Instance (by reference)
  content_instance          : ContentInstance
  # Practice State
  state                     : StudentPracticeState!
  # Student Activity URLS
  student_activity          : StudentActivity!
  # Dislayed title
  title                     : String
  # Mastery data
  mastery                   : PracticeMastery
  # ToDo: this object should be a union or non application specific
  lock_status               : APBookPracticeLockStatus!
}
enum StudentPracticeState {
  # In progress
  ACTIVE
  # Not in progress
  INACTIVE
}

type PracticeMastery {
  score                     : Int!
  max_score                 : Int!
}

input RefetchPracticeInput {
  id                        : ID!
}

input RefetchAPStudentPracticeInput {
  submission_target_id      : ID!
  submission_target_type    : SubmissionTargetType!
  site_code                 : String
  student_id                : ID!
  books                     : [APBookPracticeInput!]!
}

input APBookPracticeInput {
  book_name                 : String!
  book_stars                : Int!
  status                    : APBookPracticeStatus!
}

enum APBookPracticeStatus {
  CURRENT
  SUGGESTED
}

enum APBookPracticeLockStatus {
  LOCKED
  UNLOCKED
}

type APBookPracticePayload {
  success                          : Boolean!
  status                           : APBookPracticeStatus!
  practice_refetch_payload         : RefetchPayload!
  content_instance_refetch_payload : RefetchPayload!
  student_practice_refetch_payload : RefetchPayload!
}

type RefetchAPStudentPracticePayload {
    success    : Boolean!
    books      : [APBookPracticePayload]!
}

############################################
# Queries and Mutations
############################################

extend type Query
{
  practice(id: ID!):Practice
  student_practice(id: ID!):StudentPractice
  student_practice_by_student_id(student_id: ID!, limit:Int, offset:Int): [StudentPractice]
}

extend type Mutation
{
  refetch_ap_student_practice(input: RefetchAPStudentPracticeInput!):RefetchAPStudentPracticePayload
}

query GetStudentPracticeByStudentId($student_id: ID!, $limit:Int, $offset:Int) {
  student_practice_by_student_id(student_id: $student_id, limit: $limit, offset: $offset) {
    view_type
    mastery {
      score
      max_score
    }
    student_activity {
      open_url
      end_url
    }
    lock_status
    state
    practice {
      content_instance {
        usage_label
        content_type
        external_instance_data {
          ...on APInstanceData {
            book_name
            book_character
            book_title
          }
        }
      }
    }
  }
}

# Bill's instance of Bill's mutation - this guys generates a method on OWMSchema
mutation RefetchAPStudentPractice($input: RefetchAPStudentPracticeInput!) {
  refetch_ap_student_practice(input: $input) {
    success
    books {
      status
      practice_refetch_payload
      {
        id
        operation
        success
      }
      content_instance_refetch_payload
      {
        id
        operation
        success
      }
      student_practice_refetch_payload
      {
        id
        operation
        success
      }
    }
  }
}

scalar HmmDoWeNeedToTypeThis # aka, any / dynamic / todo

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Must exactly match widget names (for require statements)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
enum WGW_typescript_widgets {
  ots_teacher
  ots_student
}


# - - - - - - - - - - - - - - - - - - - - - -
# WM Assignment Module
# - - - - - - - - - - - - - - - - - - - - - -
type WMAssignmentModuleOptsType {
  title: String
  assignment_type: String
  is_active: Boolean
  content_opts: HmmDoWeNeedToTypeThis
  id               : ID!
  usage_label      : UsageLabel!
  gallery_image_id : String!
  view_type        : ViewType!
  published_by_name: String!
  content_id: ID!
}

type WMSDAssignmentBlock {
  asgn: StudentAssignment
}

# - - - - - - - - - - - - - - - - - - - - - -
# WM Feedback Module
# - - - - - - - - - - - - - - - - - - - - - -
# type WMFeedbackModuleOptsType {
#   title: String
#   assignment_type: String
#   content_opts: HmmDoWeNeedToTypeThis
#   is_new: Boolean
# }
# type WMFeedbackModuleOptsType {
#   student_assignment: Object
#   submitted_at: String
#   usage_label: String
#   assignment_title: String
#   details: Object
#   assignment_content: [Object]
#   flag: String
# }

enum AuthnProvider {
  WOOTMATH
  GOOGLE
  CLEVER
  LTI
  ANONYMOUS
}

enum AuthzProvider {
  GOOGLE
  CLEVER
}

type ExternAuthn {
  id: String!
  authn_provider:AuthnProvider!
}

###########################################
# Roster Schema
############################################

type Roster {
  course_provider    : CourseProvider!
  section_name       : String!
  section_id         : String!
  grade              : String
  students           : [Student]
}

type Student {
  username           : String!
  student_id         : String!
  name_first         : String
  name_last          : String
  grade              : String
  # ExternalAuthn from auth.gql -- ToDo  : require this field after routes are baked
  extern_authn       : ExternAuthn
}

input CreateSectionInput {
  teacher_id         : String!
  section_name       : String!
  grade              : String!
  admin_id           : String # Only needed if action performed by an admin
}

type CreateSectionPayload {
  success            : Boolean!
  section_id         : String
  message            : String
  error_code         : String
}

input UpdateSectionInput {
  teacher_id         : String!
  section_id         : String!
  operation          : UpdateOperation!
  section_name       : String!
  grade              : String
  admin_id           : String # Only needed if action performed by an admin
}

type UpdateSectionPayload {
  success            : Boolean!
  message            : String
  error_code         : String
}

enum UpdateOperation {
  UPDATE
  DELETE
  ARCHIVE
}

input CreateStudentInSectionInput {
  section_id         : String!
  teacher_id         : String!
  username           : String!
  password           : String!
  name_first         : String
  last_initial       : String
  grade              : String
  admin_id           : String # Only needed if action performed by an admin
}

type CreateStudentInSectionPayload {
  success            : Boolean!
  student_id         : String
  message            : String
  error_code         : String
}

input DeleteStudentFromSectionInput {
  student_id         : String!
  section_id         : String!
  teacher_id         : String!
  admin_id           : String # Only needed if action performed by an admin
}

type DeleteStudentFromSectionPayload {
  success            : Boolean!
  student_id         : String
  message            : String
  error_code         : String
}

input MoveStudentSectionInput {
  student_id         : String!
  from_section_id    : String!
  to_section_id      : String!
  teacher_id         : String
  admin_id           : String # Only needed if action performed by an admin
}

type MoveStudentSectionPayload {
  success            : Boolean!
  student_id         : String!
  message            : String
  error_code         : String
}

input UpdateStudentSettingsInput {
  student_id         : String!
  teacher_id         : String!
  section_id         : String!
  username           : String
  password           : String
  name_first         : String
  last_initial       : String
  grade              : String
  admin_id           : String # Only needed if action performed by an admin
}

type UpdateStudentSettingsPayload {
  success            : Boolean!
  student_id         : String
  username           : String
  message            : String
  error_code         : String
}

input CSVRosterInput {
  admin_id           : String!
  schools            : [CSVRosterSchoolInput]!
}

input CSVRosterSchoolInput {
  nces_school_number : String!
  teachers           : [CSVRosterTeacherInput]!
}

input CSVRosterTeacherInput {
  email              : String!
  sections           : [CSVRosterSectionInput]!
  username           : String
  name_first         : String
  name_last          : String
  password           : String
}

input CSVRosterSectionInput {
  section_name       : String!
  students           : [CSVRosterStudentInput]!
  grade              : String
}

input CSVRosterStudentInput {
  username           : String!
  password           : String
  name_first         : String
  last_initial       : String
  grade              : String
}

type ValidateCSVRosterPayload {
  is_valid           : Boolean!
  errors             : [String]!
}

type ProcessCSVRosterPayload {
  result             : ProcessCSVRosterResult!
  inserted_teachers  : [Teacher]
  inserted_sections  : [Roster]
  inserted_students  : [Student]
  updated_teachers   : [Teacher]
  updated_sections   : [Roster]
  updated_students   : [Student]
  errors             : [String]
}

enum ProcessCSVRosterResult {
  SUCCESS
  PARTIAL
  FAILURE
}

enum CourseProvider {
  WOOTMATH
  CLEVER
  LTI
  GOOGLE
  ANONYMOUS
}

############################################
# Queries and Mutations
############################################

extend type Query
{
  get_roster_by_section_id(section_id: String!, teacher_id: String!, course_provider:CourseProvider!):Roster
  get_rosters_by_teacher_id(teacher_id: String!):[Roster]
  get_section_ids_by_teacher_id(teacher_id: String!):[String]
  # need to provide roster data to bill or ask Jeff to provide from login
  # get_roster_by_assignment_id(aid:String!)
}

query GetSectionIDsByTeacherID($teacher_id: String!) {
  get_section_ids_by_teacher_id(teacher_id: $teacher_id)
}

fragment CommonRosterData on Roster {
  section_id
  course_provider
  section_name
  grade
  students {
    username
    student_id
    extern_authn {
      id
      authn_provider
    }
  }
}

query GetRosterBySectionID($section_id: String!, $teacher_id: String!, $course_provider: CourseProvider!) {
  get_roster_by_section_id(section_id: $section_id, teacher_id: $teacher_id, course_provider: $course_provider) {
    ...CommonRosterData
    students {
      username
      student_id
      extern_authn {
        id
        authn_provider
      }
    }
  }
}

query GetRostersByTeacherID($teacher_id: String!) {
  get_rosters_by_teacher_id(teacher_id: $teacher_id) {
    ...CommonRosterData
  }
}

extend type Mutation
{
  create_section(input: CreateSectionInput!): CreateSectionPayload,
  update_section(input: UpdateSectionInput!): UpdateSectionPayload,
  create_student_in_section(input: CreateStudentInSectionInput!):CreateStudentInSectionPayload,
  delete_student_from_section(input: DeleteStudentFromSectionInput!):DeleteStudentFromSectionPayload
  move_student_section(input: MoveStudentSectionInput!):MoveStudentSectionPayload!,
  update_student_settings(input: UpdateStudentSettingsInput!): UpdateStudentSettingsPayload
  validate_csv_roster(input: CSVRosterInput!): ValidateCSVRosterPayload
  process_csv_roster(input: CSVRosterInput!): ProcessCSVRosterPayload
}

mutation CreateSection($input: CreateSectionInput!) {
  create_section(input: $input) {
    success
    section_id
    message
    error_code
  }
}

mutation UpdateSection($input: UpdateSectionInput!) {
  update_section(input: $input) {
    success
    message
    error_code
  }
}

mutation CreateStudentInSection($input: CreateStudentInSectionInput!) {
  create_student_in_section(input: $input) {
    success
    student_id
    message
    error_code
  }
}

mutation DeleteStudentFromSection($input: DeleteStudentFromSectionInput!) {
  delete_student_from_section(input: $input) {
    success
    student_id
    message
    error_code
  }
}

mutation MoveStudentSection($input: MoveStudentSectionInput!) {
  move_student_section(input: $input) {
    success
    student_id
    message
    error_code
  }
}

mutation UpdateStudentSettings($input: UpdateStudentSettingsInput!) {
  update_student_settings(input: $input) {
    success
    student_id
    username
    message
    error_code
  }
}

mutation ValidateCSVRoster($input: CSVRosterInput!) {
  validate_csv_roster(input: $input) {
    is_valid
    errors
  }
}

mutation ProcessCSVRoster($input: CSVRosterInput!) {
  process_csv_roster(input: $input) {
    result
    inserted_teachers {
      teacher_id
      username
      email
      name_first
      name_last
    }
    inserted_sections {
      course_provider
      section_name
      section_id
      grade
    }
    inserted_students {
      username
      student_id
      name_first
      name_last
      grade
      extern_authn {
        id
        authn_provider
      }
    }
    updated_teachers {
      teacher_id
      username
      email
      name_first
      name_last
    }
    updated_sections {
      course_provider
      section_name
      section_id
      grade
    }
    updated_students {
      username
      student_id
      name_first
      name_last
      grade
      extern_authn {
        id
        authn_provider
      }
    }
    errors
  }
}


###########################################
# Admin Schema
############################################

type Admin {
  admin_id             : String!
  teacher_id           : String!
  admin_role           : AdminRole!
  districts            : [String]
  schools              : [String]
  teachers             : [String]
}

enum AdminRole {
  ACCOUNT_MANAGEMENT
  DATA_REVIEW
  CO_TEACHER
  TUTOR_ADMIN
}

type School {
  school_id            : String!
  name                 : String!
  teachers             : [Teacher]!
}

type Teacher {
  teacher_id           : String!
  username             : String!
  email                : String!
  sections             : [Roster]
  name_first           : String!
  name_last            : String!
  password             : String
}

input AddTeacherToAdminInput {
  admin_id             : String!
  teacher_id           : String!
  nces_school_number   : String
}

input RemoveTeacherFromAdminInput {
  admin_id             : String!
  teacher_id           : String!
}

type ModifyAdminTeacherPayload {
  operation            : ModifyAdminTeacherOperation!
  success              : Boolean!
  message              : String
  error_code           : String
}

enum ModifyAdminTeacherOperation {
  ADD
  REMOVE
}

input CreateTeacherAccountInput {
  admin_id             : String!
  email                : String!
  name_first           : String!
  name_last            : String!
  password             : String!
  nces_school_number   : String!
}

type CreateTeacherAccountPayload {
  success              : Boolean!
  teacher_id           : String
  site_code            : String
  error_code           : String
}

input UpdateTeacherAccountInput {
  teacher_id           : String!
  admin_id             : String!
  username             : String
  email                : String
  name_first           : String
  name_last            : String
  password             : String
  nces_school_number   : String
}

type UpdateTeacherAccountPayload {
  success              : Boolean!
  email                : String
  username             : String
  name_first           : String
  name_last            : String
  error_code           : String
}

############################################
# Queries and Mutations
############################################

extend type Query {
  get_schools_by_admin_id(admin_id: String!, school_ids: [String], teacher_ids: [String], section_ids: [String] ):[School]!
  is_admin(teacher_id: String!):Boolean!
  get_admin_details(teacher_id: String!):Admin!
}

query IsAdmin($teacher_id: String!) {
  is_admin(teacher_id: $teacher_id)
}

query GetAdminDetails($teacher_id: String!) {
  get_admin_details(teacher_id: $teacher_id) {
    admin_id
    teacher_id
    admin_role
    districts
    schools
    teachers
  }
}

query GetSchoolsByAdminID($admin_id: String!, $school_ids: [String], $teacher_ids: [String], $section_ids: [String]) {
  get_schools_by_admin_id(admin_id: $admin_id, school_ids: $school_ids, teacher_ids: $teacher_ids, section_ids:$section_ids) {
    school_id
    name
    teachers {
      username
      teacher_id
      email
      name_first
      name_last
      sections {
        course_provider
        section_name
        section_id
        grade
        students {
          username
          student_id
          name_last
          name_first
          grade
          extern_authn {
            id
            authn_provider
          }
        }
      }
    }
  }
}

extend type Mutation {
  add_teacher_to_admin(input: AddTeacherToAdminInput!):ModifyAdminTeacherPayload
  remove_teacher_from_admin(input: RemoveTeacherFromAdminInput!):ModifyAdminTeacherPayload
  create_teacher_account(input: CreateTeacherAccountInput!):CreateTeacherAccountPayload
  update_teacher_account(input: UpdateTeacherAccountInput!):UpdateTeacherAccountPayload
}

mutation AddTeacherToAdmin($input: AddTeacherToAdminInput!) {
  add_teacher_to_admin(input: $input) {
    operation
    success
    message
    error_code
  }
}

mutation RemoveTeacherFromAdmin($input: RemoveTeacherFromAdminInput!) {
  remove_teacher_from_admin(input: $input) {
    operation
    success
    message
    error_code
  }
}

mutation CreateTeacherAccount($input: CreateTeacherAccountInput!) {
  create_teacher_account(input: $input) {
    success
    teacher_id
    site_code,
    error_code
  }
}


mutation UpdateTeacherAccount($input: UpdateTeacherAccountInput!) {
  update_teacher_account(input: $input) {
    success
    email
    name_first
    name_last
    error_code
  }
}

###########################################
# Feedback Schema
############################################

type Comment {
  id            : ID!
  comment_type  : CommentType
  user_id       : String!
  title         : String!
  body          : String!
  created_at    : String!
  last_modified : String!
  task_id       : ID!
  target_id     : ID # Object that the comment is associated with
  parent_id     : ID # Parent Comment
}

enum CommentType {
  STUDENT_COMMENT
  TEACHER_COMMENT
}

input CreateCommentInput {
  user_id       : String!
  title         : String!
  body          : String!
  task_id       : ID!
  target_id     : ID
  parent_id     : ID
}

type CreateCommentPayload {
  success       : Boolean!
  id            : ID
  error_code    : String
}

input UpdateCommentInput {
  id            : ID!
  user_id       : String!
  title         : String
  body          : String
  task_id       : ID
  target_id     : ID
  parent_id     : ID
}

type UpdateCommentPayload {
  success       : Boolean!
  error_code    : String
}

############################################
# Queries and Mutations
############################################

extend type Query
{
  get_comment_by_id(id: ID!):Comment!
  get_comments_by_user_id(user_id: String!):[Comment]!
  get_comments_by_task_id(task_id: ID!):[Comment]!
  get_comments_by_target_id(target_id: ID!):[Comment]!
  get_comments_by_parent_id(parent_id: ID!):[Comment]!
}

fragment CommonCommentData on Comment {
  id
  comment_type
  user_id
  title
  created_at
  last_modified
  task_id
  target_id
  parent_id
}

query GetCommentById($id: ID!) {
  get_comment_by_id(id: $id) {
    ...CommonCommentData
  }
}

query GetCommentsByUserId($user_id: String!) {
  get_comments_by_user_id(user_id: $user_id) {
    ...CommonCommentData
  }
}

query GetCommentsByTaskId($task_id: ID!) {
  get_comments_by_task_id(task_id: $task_id) {
    ...CommonCommentData
  }
}

query GetCommentsByTargetId($target_id: ID!) {
  get_comments_by_target_id(target_id: $target_id) {
    ...CommonCommentData
  }
}

query GetCommentsByParentId($parent_id: ID!) {
  get_comments_by_parent_id(parent_id: $parent_id) {
    ...CommonCommentData
  }
}

extend type Mutation
{
  create_comment(input: CreateCommentInput!): CreateCommentPayload!
  update_comment(input: UpdateCommentInput!): UpdateCommentPayload!
}

mutation CreateComment($input: CreateCommentInput!) {
  create_comment(input: $input) {
    success
    id
    error_code
  }
}

mutation UpdateComment($input: UpdateCommentInput!) {
  update_comment(input: $input) {
    success
    error_code
  }
}

###########################################
# User Website Data Schema
############################################

# type UserWebsiteData {
#   user_id: String!
#   user_type: UserType!
#   shared_content_facets: [Facet]
# }

type Facet {
  id:String!
  category: FacetCategory!
  terms: [String!]!
}

enum UserType {
  TEACHER
  STUDENT
  ADMIN
  ANONYMOUS
}

enum FacetCategory {
  SEARCH_TERM
  SUBJECT
  GRADE
  QUESTION_COUNT
  COLLECTION
  MY_CONTENT
  USAGE_LABEL
  FOLDERS
  ASSIGNMENTS
  EMPTY
  CLASSES
}

enum NameSpace {
  SHARED_CONTENT_FACET_STATE
  MY_CONTENT_FACET_STATE
  CONTENT_ONBOARDING_MODAL_SEEN
}

type UserBoolean {
  value: Boolean!
  last_updated: String
}

############################################
# Queries
############################################

extend type Query {
  # get_user_website_data(user_id:String!, user_type:UserType!): UserWebsiteData!
  get_facet_state(user_id:String!, user_type:UserType!, name_space:NameSpace!): [Facet]!
  get_user_boolean(user_id:String!, user_type:UserType!, name_space:NameSpace!): UserBoolean!
}

query GetFacetState($user_id: String!, $user_type: UserType!, $name_space: NameSpace!) {
  get_facet_state(user_id: $user_id, user_type: $user_type, name_space: $name_space) {
    id
    category
    terms
  }
}

query GetUserBoolean($user_id: String!, $user_type: UserType!, $name_space: NameSpace!) {
  get_user_boolean(user_id: $user_id, user_type: $user_type, name_space: $name_space) {
    value
    last_updated
  }
}

############################################
# Mutations
############################################

input UpdateFacetStateInput {
  user_id: String!
  user_type: UserType!
  name_space: NameSpace!
  selected_facets: [FacetInput]!
}

input FacetInput {
  id:String!
  category: FacetCategory!
  terms: [String!]!
}

type UpdateFacetStatePayload {
  success: Boolean!
  error: String
}

input UpdateUserBooleanInput {
  user_id: String!
  user_type: UserType!
  name_space: NameSpace!
  value: Boolean!
}

type UpdateUserBooleanPayload {
  success: Boolean!
  error: String
}

extend type Mutation {
  update_facet_state(input:UpdateFacetStateInput!): UpdateFacetStatePayload!
  update_user_boolean(input:UpdateUserBooleanInput!): UpdateUserBooleanPayload!
}

mutation UpdateFacetState($input: UpdateFacetStateInput!) {
  update_facet_state(input: $input) {
    success
    error
  }
}

mutation UpdateUserBoolean($input: UpdateUserBooleanInput!) {
  update_user_boolean(input: $input) {
    success
    error
  }
}
############################################
# Test GQL Endpoints
############################################

input DeleteSubmissionTargetByTeacherIDInput
{
  teacher_id: String!
}

############################################
# Queries and Mutations
############################################

extend type Mutation
{
  delete_submission_target_by_teacher_id(input:DeleteSubmissionTargetByTeacherIDInput!):StatusPayload
}

mutation DeleteSubmissionTargetByTeacherID($input:DeleteSubmissionTargetByTeacherIDInput!) {
  delete_submission_target_by_teacher_id(input:$input) {
    success
  }
}

extend type Query
{
  alive(dummy:String):StatusPayload
}

query Alive($dummy:String) {
  alive(dummy:$dummy) {
    success
  }
}

